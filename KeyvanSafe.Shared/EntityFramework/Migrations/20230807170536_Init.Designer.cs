// <auto-generated />
using System;
using KeyvanSafe.Shared.EntityFramework.Configs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KeyvanSafe.Shared.EntityFramework.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230807170536_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Claims.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdaterId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdaterId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9511),
                            CreatorId = 0,
                            Name = "UserManagement",
                            Title = "مدیریت کاربران",
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9514),
                            UpdaterId = 0,
                            Value = "identity.users.command"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9522),
                            CreatorId = 0,
                            Name = "RoleManagement",
                            Title = "مدیریت نقش‌ها",
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9524),
                            UpdaterId = 0,
                            Value = "identity.roles.command"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9527),
                            CreatorId = 0,
                            Name = "ClaimManagement",
                            Title = "مدیریت دسترسی ها",
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9528),
                            UpdaterId = 0,
                            Value = "identity.claims.command"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9531),
                            CreatorId = 0,
                            Name = "UserView",
                            Title = "نمایش  مدیریت کاربران",
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9532),
                            UpdaterId = 0,
                            Value = "identity.users.query"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9534),
                            CreatorId = 0,
                            Name = "RoleView",
                            Title = "نمایش  مدیریت نقش ها",
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9536),
                            UpdaterId = 0,
                            Value = "identity.roles.query"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9542),
                            CreatorId = 0,
                            Name = "ClaimView",
                            Title = "نمایش  مدیریت دسترسی ها",
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9544),
                            UpdaterId = 0,
                            Value = "identity.claims.query"
                        });
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 324, DateTimeKind.Local).AddTicks(8153),
                            CreatorId = 0,
                            Title = "Owner",
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 324, DateTimeKind.Local).AddTicks(8154),
                            UpdaterId = 0
                        });
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId", "Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1,
                            Id = 0,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9626),
                            CreatorId = 0,
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9628),
                            UpdaterId = 0
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2,
                            Id = 0,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9633),
                            CreatorId = 0,
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9634),
                            UpdaterId = 0
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3,
                            Id = 0,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9637),
                            CreatorId = 0,
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9638),
                            UpdaterId = 0
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4,
                            Id = 0,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9640),
                            CreatorId = 0,
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9642),
                            UpdaterId = 0
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5,
                            Id = 0,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9644),
                            CreatorId = 0,
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9645),
                            UpdaterId = 0
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6,
                            Id = 0,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9648),
                            CreatorId = 0,
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9650),
                            UpdaterId = 0
                        });
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPasswordChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nchar(32)")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdaterId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "6CENIMVUC1FV4MNX45OJMJFLEMZRGCEH",
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9258),
                            CreatorId = 0,
                            Email = "bamdadtabari@outlook.com",
                            FailedLoginCount = 0,
                            IsLockedOut = false,
                            IsMobileConfirmed = false,
                            LastPasswordChangeTime = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9239),
                            Mobile = "09301724389",
                            PasswordHash = "6HJ3nVXreGJGBxw4xSuaEOvuxDM/ljwLKgkJPCZ2FeE=.lOSe3TUpmCIMmw7yDPeGZA==",
                            SecurityStamp = "QFRU1HHGR0DR1EZYMA2SH48EOA75H1JO",
                            State = "Active",
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 334, DateTimeKind.Local).AddTicks(9260),
                            UpdaterId = 0,
                            Username = "Illegible_Owner"
                        });
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Users.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdaterId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId", "Id");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            Id = 0,
                            CreatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 324, DateTimeKind.Local).AddTicks(8084),
                            CreatorId = 0,
                            UpdatedAt = new DateTime(2023, 8, 7, 10, 5, 36, 324, DateTimeKind.Local).AddTicks(8124),
                            UpdaterId = 0
                        });
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Claims.Claim", b =>
                {
                    b.HasOne("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Users.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Roles.RolePermission", b =>
                {
                    b.HasOne("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Permissions.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Roles.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Users.UserRole", b =>
                {
                    b.HasOne("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Permissions.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Roles.Role", b =>
                {
                    b.Navigation("RolePermission");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KeyvanSafe.Shared.EntityFramework.Entities.Identity.Users.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
